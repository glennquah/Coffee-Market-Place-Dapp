/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Auction {
  export type AuctionDataStruct = {
    auctionId: BigNumberish;
    seller: AddressLike;
    highestBid: BigNumberish;
    highestBidder: AddressLike;
    auctionStartTime: BigNumberish;
    auctionCommitEndTime: BigNumberish;
    auctionRevealEndTime: BigNumberish;
    miniumBidAmount: BigNumberish;
    finalized: boolean;
    tokenId: BigNumberish;
  };

  export type AuctionDataStructOutput = [
    auctionId: bigint,
    seller: string,
    highestBid: bigint,
    highestBidder: string,
    auctionStartTime: bigint,
    auctionCommitEndTime: bigint,
    auctionRevealEndTime: bigint,
    miniumBidAmount: bigint,
    finalized: boolean,
    tokenId: bigint
  ] & {
    auctionId: bigint;
    seller: string;
    highestBid: bigint;
    highestBidder: string;
    auctionStartTime: bigint;
    auctionCommitEndTime: bigint;
    auctionRevealEndTime: bigint;
    miniumBidAmount: bigint;
    finalized: boolean;
    tokenId: bigint;
  };
}

export interface AuctionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NFTAddress"
      | "auctionCounter"
      | "auctions"
      | "auctionsBid"
      | "commitBid"
      | "createAuction"
      | "finalizeAuction"
      | "getAuction"
      | "minimumAuctionFee"
      | "ownerWithdraw"
      | "revealBid"
      | "setMinimumAuctionFee"
      | "withdrawRefund"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsBid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBid",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumAuctionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revealBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumAuctionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRefund",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NFTAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionsBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "commitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumAuctionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumAuctionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRefund",
    data: BytesLike
  ): Result;
}

export interface Auction extends BaseContract {
  connect(runner?: ContractRunner | null): Auction;
  waitForDeployment(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NFTAddress: TypedContractMethod<[], [string], "view">;

  auctionCounter: TypedContractMethod<[], [bigint], "view">;

  auctions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        auctionId: bigint;
        seller: string;
        highestBid: bigint;
        highestBidder: string;
        auctionStartTime: bigint;
        auctionCommitEndTime: bigint;
        auctionRevealEndTime: bigint;
        miniumBidAmount: bigint;
        finalized: boolean;
        tokenId: bigint;
      }
    ],
    "view"
  >;

  auctionsBid: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, boolean] & {
        commitHash: string;
        bidAmount: bigint;
        revealed: boolean;
      }
    ],
    "view"
  >;

  commitBid: TypedContractMethod<
    [auctionId: BigNumberish, _commitHash: BytesLike],
    [void],
    "payable"
  >;

  createAuction: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _miniumBidAmount: BigNumberish,
      _auctionCommitEndTime: BigNumberish,
      _auctionRevealEndTime: BigNumberish
    ],
    [void],
    "payable"
  >;

  finalizeAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAuction: TypedContractMethod<
    [auctionId: BigNumberish],
    [Auction.AuctionDataStructOutput],
    "view"
  >;

  minimumAuctionFee: TypedContractMethod<[], [bigint], "view">;

  ownerWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  revealBid: TypedContractMethod<
    [auctionId: BigNumberish, _bidAmount: BigNumberish, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumAuctionFee: TypedContractMethod<
    [_minimumAuctionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawRefund: TypedContractMethod<
    [auctionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NFTAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "auctionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "auctions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        auctionId: bigint;
        seller: string;
        highestBid: bigint;
        highestBidder: string;
        auctionStartTime: bigint;
        auctionCommitEndTime: bigint;
        auctionRevealEndTime: bigint;
        miniumBidAmount: bigint;
        finalized: boolean;
        tokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "auctionsBid"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [string, bigint, boolean] & {
        commitHash: string;
        bidAmount: bigint;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitBid"
  ): TypedContractMethod<
    [auctionId: BigNumberish, _commitHash: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _miniumBidAmount: BigNumberish,
      _auctionCommitEndTime: BigNumberish,
      _auctionRevealEndTime: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "finalizeAuction"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuction"
  ): TypedContractMethod<
    [auctionId: BigNumberish],
    [Auction.AuctionDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "minimumAuctionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealBid"
  ): TypedContractMethod<
    [auctionId: BigNumberish, _bidAmount: BigNumberish, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumAuctionFee"
  ): TypedContractMethod<
    [_minimumAuctionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawRefund"
  ): TypedContractMethod<[auctionId: BigNumberish], [void], "nonpayable">;

  filters: {};
}
