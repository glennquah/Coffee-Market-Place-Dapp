/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Voting {
  export type CoffeeVoteCandidateStruct = {
    candidateId: BigNumberish;
    coffeeName: string;
    imageUrl: string;
    description: string;
    coffeeOrigin: string;
    beanType: string;
    roastLevel: string;
    voteCount: BigNumberish;
  };

  export type CoffeeVoteCandidateStructOutput = [
    candidateId: bigint,
    coffeeName: string,
    imageUrl: string,
    description: string,
    coffeeOrigin: string,
    beanType: string,
    roastLevel: string,
    voteCount: bigint
  ] & {
    candidateId: bigint;
    coffeeName: string;
    imageUrl: string;
    description: string;
    coffeeOrigin: string;
    beanType: string;
    roastLevel: string;
    voteCount: bigint;
  };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCoffeeCandidate"
      | "candidateCounter"
      | "coffee_vote_candidates"
      | "customers"
      | "getAllVotesOfCoffeeCandiates"
      | "getCoffeeCandidate"
      | "getRemainingTimeLeftToVote"
      | "isOpenToVote"
      | "vote"
      | "votingEndTime"
      | "votingStartTime"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CoffeeCandidateAdded" | "CoffeeVoted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCoffeeCandidate",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "coffee_vote_candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVotesOfCoffeeCandiates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoffeeCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTimeLeftToVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOpenToVote",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "votingEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingStartTime",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCoffeeCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coffee_vote_candidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "customers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllVotesOfCoffeeCandiates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoffeeCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTimeLeftToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOpenToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStartTime",
    data: BytesLike
  ): Result;
}

export namespace CoffeeCandidateAddedEvent {
  export type InputTuple = [
    coffeeName: string,
    imageUrl: string,
    description: string,
    coffeeOrigin: string,
    beanType: string,
    roastLevel: string
  ];
  export type OutputTuple = [
    coffeeName: string,
    imageUrl: string,
    description: string,
    coffeeOrigin: string,
    beanType: string,
    roastLevel: string
  ];
  export interface OutputObject {
    coffeeName: string;
    imageUrl: string;
    description: string;
    coffeeOrigin: string;
    beanType: string;
    roastLevel: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CoffeeVotedEvent {
  export type InputTuple = [candidateId: BigNumberish];
  export type OutputTuple = [candidateId: bigint];
  export interface OutputObject {
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCoffeeCandidate: TypedContractMethod<
    [
      _coffeeName: string,
      _imageUrl: string,
      _description: string,
      _coffeeOrigin: string,
      _beanType: string,
      _roastLevel: string
    ],
    [void],
    "nonpayable"
  >;

  candidateCounter: TypedContractMethod<[], [bigint], "view">;

  coffee_vote_candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, string, string, bigint] & {
        candidateId: bigint;
        coffeeName: string;
        imageUrl: string;
        description: string;
        coffeeOrigin: string;
        beanType: string;
        roastLevel: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;

  customers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getAllVotesOfCoffeeCandiates: TypedContractMethod<
    [],
    [Voting.CoffeeVoteCandidateStructOutput[]],
    "view"
  >;

  getCoffeeCandidate: TypedContractMethod<
    [_index: BigNumberish],
    [Voting.CoffeeVoteCandidateStructOutput],
    "view"
  >;

  getRemainingTimeLeftToVote: TypedContractMethod<[], [bigint], "view">;

  isOpenToVote: TypedContractMethod<[], [boolean], "view">;

  vote: TypedContractMethod<
    [_coffeeCandidateIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingEndTime: TypedContractMethod<[], [bigint], "view">;

  votingStartTime: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCoffeeCandidate"
  ): TypedContractMethod<
    [
      _coffeeName: string,
      _imageUrl: string,
      _description: string,
      _coffeeOrigin: string,
      _beanType: string,
      _roastLevel: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "candidateCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "coffee_vote_candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, string, string, bigint] & {
        candidateId: bigint;
        coffeeName: string;
        imageUrl: string;
        description: string;
        coffeeOrigin: string;
        beanType: string;
        roastLevel: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "customers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllVotesOfCoffeeCandiates"
  ): TypedContractMethod<
    [],
    [Voting.CoffeeVoteCandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCoffeeCandidate"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [Voting.CoffeeVoteCandidateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingTimeLeftToVote"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOpenToVote"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_coffeeCandidateIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingStartTime"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "CoffeeCandidateAdded"
  ): TypedContractEvent<
    CoffeeCandidateAddedEvent.InputTuple,
    CoffeeCandidateAddedEvent.OutputTuple,
    CoffeeCandidateAddedEvent.OutputObject
  >;
  getEvent(
    key: "CoffeeVoted"
  ): TypedContractEvent<
    CoffeeVotedEvent.InputTuple,
    CoffeeVotedEvent.OutputTuple,
    CoffeeVotedEvent.OutputObject
  >;

  filters: {
    "CoffeeCandidateAdded(string,string,string,string,string,string)": TypedContractEvent<
      CoffeeCandidateAddedEvent.InputTuple,
      CoffeeCandidateAddedEvent.OutputTuple,
      CoffeeCandidateAddedEvent.OutputObject
    >;
    CoffeeCandidateAdded: TypedContractEvent<
      CoffeeCandidateAddedEvent.InputTuple,
      CoffeeCandidateAddedEvent.OutputTuple,
      CoffeeCandidateAddedEvent.OutputObject
    >;

    "CoffeeVoted(uint256)": TypedContractEvent<
      CoffeeVotedEvent.InputTuple,
      CoffeeVotedEvent.OutputTuple,
      CoffeeVotedEvent.OutputObject
    >;
    CoffeeVoted: TypedContractEvent<
      CoffeeVotedEvent.InputTuple,
      CoffeeVotedEvent.OutputTuple,
      CoffeeVotedEvent.OutputObject
    >;
  };
}
