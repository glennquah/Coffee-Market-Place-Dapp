/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProductInterface extends Interface {
  getFunction(
    nameOrSignature: "getListing" | "productCounter" | "products"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProductAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "getListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
}

export namespace ProductAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    roaster: AddressLike,
    name: string,
    price: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    productId: bigint,
    roaster: string,
    name: string,
    price: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    productId: bigint;
    roaster: string;
    name: string;
    price: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Product extends BaseContract {
  connect(runner?: ContractRunner | null): Product;
  waitForDeployment(): Promise<this>;

  interface: ProductInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getListing: TypedContractMethod<
    [_productId: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint[], boolean] & {
        name: string;
        description: string;
        ipfsHash: string;
        price: bigint;
        quantity: bigint;
        nftIds: bigint[];
        available: boolean;
      }
    ],
    "view"
  >;

  productCounter: TypedContractMethod<[], [bigint], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint, boolean] & {
        productId: bigint;
        roaster: string;
        name: string;
        description: string;
        ipfsHash: string;
        price: bigint;
        quantity: bigint;
        available: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [_productId: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint[], boolean] & {
        name: string;
        description: string;
        ipfsHash: string;
        price: bigint;
        quantity: bigint;
        nftIds: bigint[];
        available: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "productCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint, bigint, boolean] & {
        productId: bigint;
        roaster: string;
        name: string;
        description: string;
        ipfsHash: string;
        price: bigint;
        quantity: bigint;
        available: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ProductAdded"
  ): TypedContractEvent<
    ProductAddedEvent.InputTuple,
    ProductAddedEvent.OutputTuple,
    ProductAddedEvent.OutputObject
  >;

  filters: {
    "ProductAdded(uint256,address,string,uint256,uint256)": TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;
    ProductAdded: TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;
  };
}
